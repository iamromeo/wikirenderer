<?php

/**
 * @author Laurent Jouanneau
 *
 * @copyright 2016 Laurent Jouanneau
 *
 * @link http://wikirenderer.jelix.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public 2.1
 * License as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

namespace WikiRenderer\Generator;

/**
 * interface to implements a class that will generate an inline element
 * in the output format (html element for instance)
 */
interface InlineComplexGeneratorInterface extends InlineGeneratorInterface {

    /**
     * append the given string to the content of the element
     *
     * @internal the given string will be transformed as a generator
     * @param string $string
     */
    public function addRawContent($string);

    /**
     * set the content of the element
     *
     * the given string will replace previous content added with
     * addRawContent() and addContent()
     * 
     * @internal the given string will be transformed as a generator
     * @param string $string
     */
    public function setRawContent($string);

    /**
     * the content generated by the given generator will be append to
     * the content of the element.
     * 
     * @param InlineGeneratorInterface $content
     */
    public function addContent(InlineGeneratorInterface $content);

    /**
     * the content generated by the given generator will be 
     * the content of the element.
     * 
     * the given generator will replace previous content added with
     * addRawContent() and addContent()

     * @param InlineGeneratorInterface $content
     */
    public function setContent(InlineGeneratorInterface $content);

    /**
     * return the list of all generators that will produced the
     * content of the element
     * 
     * @return InlineGeneratorInterface[]
     */
    public function getChildGenerators();

    /**
     * set an attribute value.
     *
     * list of possible attributes depends of the implementation
     *
     * @param string $name
     * @param string $value
     */
    public function setAttribute($name, $value);

    /**
     * return the value of an attribute
     *
     * @return string|null  null if the attribute does not exists ore has no
     *  value
     */
    public function getAttribute($name);
}
